// Package boaconstructor is the implementation of the boa-constructor
// GUI app that lets the user lay out the cli of their command line app
// by filling in text fields, checking boxes and selecting from drop
// down  selectors.  The names of allowable commands and flags along
// with the number, type and optional/required status of the parameters
// to  said commands and flags can be defined.  Where possible validation
// is done to catch command line input errors by users of the app being
// defined. During the design stages your work can be saved and recalled
// for editing. The preferred format is now JSON, although the original
// format is still viable and not going away any time soon.  Saving and
// using the original format may still be the best choice if you intend
// to edit it by hand using a text editor.  The input script format is
// based on the format used by docopt where the user creates a usage/help
// text that is parsed and a map created of the command line args actually
// received.  Docopt requires a more rigidly defined and formatted text.
// Now that the GUI is available the hand written input script has been
// largely superseded by the JSON format generated by the GUI.
// The JSON data generated by boa-constructor can be passed to the Boa
// package function boa.FromJSON(jsonData string, args []string) from
// your app and your app will receive a data structure containing the
// command line args with parameters etc. The same map will be obtained
// by passing to boa.FromHelp(help string, args []string), a proper inpu
// script aka usage string aka help string.  Go code to start your app,
// get and evaluate the commands received, and implement the help command
// can be generated from the GUI. The current implementation creates three
// source files, main.go, runner.go and help.go
package boaconstructor

import (
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/widget"
	"github.com/westarver/boa"
)

// sentinel value used for the first object in the JSON data to identify
// the object as the application info data record and not a command/flag
var appDataName = boa.AppDataName() //"BOA-APP-DATA"

// unexported struct to hold references to widgets needing to be accessed
// from all over the package.
type packageGlobal struct {
	app        fyne.App
	mainWindow fyne.Window
	icon       *fyne.Resource
	preview    *readOnlyEntry
	appName    *widget.Entry
	pkg        *widget.Entry
	author     *widget.Entry
	loadedPath string
	dirty      bool
}

func newPackageGlobal() *packageGlobal {
	app := app.New()
	win := app.NewWindow("Boa Constructor")

	return &packageGlobal{
		app:        app,
		mainWindow: win,
		preview:    nil,
		appName:    nil,
		pkg:        nil,
		author:     nil,
		loadedPath: "",
		dirty:      false,
	}
}

// package level instance of the above struct
var appData = newPackageGlobal()

func Run() {
	appData.mainWindow.CenterOnScreen()
	appData.mainWindow.Resize(fyne.Size{Width: 800, Height: 600})
	res, _ := fyne.LoadResourceFromPath("/home/westarver/go/src/boa-constructor-work/boa-constructor-cmd/assets/boa-icon.png")
	appData.icon = &res

	tabs := container.NewAppTabs(
		container.NewTabItem("App Info", appInfoTab()),
		container.NewTabItem("Commands", commandTab()),
		container.NewTabItem("Flags", flagTab()),
		container.NewTabItem("More", moreTab()),
	)

	tabs.SetTabLocation(container.TabLocationTop)
	appData.mainWindow.SetContent(tabs)
	appData.mainWindow.SetCloseIntercept(func() {
		verifyExit()
	})
	appData.mainWindow.SetIcon(res)
	setMainMenu()
	appData.mainWindow.ShowAndRun()
}

func verifyExit() {
	if appData.dirty {
		dlg := dialog.NewConfirm("Work not saved", "The latest edits have not been saved. Do you want to exit?", func(b bool) {
			if b {
				appData.mainWindow.Close()
			}
		}, appData.mainWindow)
		dlg.Show()
	} else {
		appData.mainWindow.Close()
	}
}
